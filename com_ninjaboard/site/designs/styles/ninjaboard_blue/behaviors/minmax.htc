<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<public:component xmlns="http://www.w3.org/1999/xhtml" xmlns:public="urn:HTMLComponent">
<script type="text/javascript">
// <![CDATA[
	var handlers = (function() {
		var elementHandlers = function() {
			this.element = element;
		};

		elementHandlers.prototype = {
			parse: function(prop) {
				var result = (/^(([\d\.]+)(px|pt|em|%)?|auto)$/).exec(this.element.currentStyle[prop]);

				if (result) {
					if (result[2].length > 0) { // numeric
						if (result[3] != "" && result[3] != "px") 
							return { value: parseFloat(result[2]), unit: result[3] };
						else 
							return { value: parseInt(result[2]), unit: "px" };
					}
					else { // auto
						return { value: result[0], unit: result[0] };
					}
				}

				return {value: null, unit: null};
			},
			contentready: function(eventName) {
				this.minWidth	= this.parse("min-width");
				this.maxWidth	= this.parse("max-width");
				this.minHeight	= this.parse("min-heigh");
				this.maxHeight	= this.parse("max-height");

				this.resize();
			},
			resize: function() {
				if (this.minWidth.value  && this.element.offsetWidth  < this.minWidth.value)  this.element.runtimeStyle.width  = this.minWidth.value;
				if (this.maxWidth.value  && this.element.offsetWidth  > this.maxWidth.value)  this.element.runtimeStyle.width  = this.maxWidth.value;
				if (this.minHeight.value && this.element.offsetHeight < this.minHeight.value) this.element.runtimeStyle.height = this.minHeight.value;
				if (this.maxHeight.value && this.element.offsetHeight > this.maxHeight.value) this.element.runtimeStyle.height = this.maxHeight.value;
			}
		};
		return new elementHandlers();
	})();
// ]]>
</script>
<public:attach event="oncontentready" onevent="handlers.contentready(event);" for="element" />
<public:attach event="onresize" onevent="handlers.resize(event);" for="window" />
</public:component>
